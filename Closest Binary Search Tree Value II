/*Given a non-empty binary search tree and a target value, find k values in the BST that are closest to the target.

Note: Given target value is a floating point. You may assume k is always valid, that is: k â‰¤ total nodes.
//You are guaranteed to have only one unique set of k values in the BST that are closest to the target. //
Follow up: Assume that the BST is balanced, could you solve it in less than O(n) runtime (where n = total nodes)?

*/

//Hint:
//Consider implement these two helper functions: getPredecessor(N), 
//which returns the next smaller node to N. getSuccessor(N), which returns the next larger node to N.

public class Solution {
  public List<Integer> closestKValues(TreeNode root, double target, int k) {
    Queue<Integer> list = new LinkedList<Integer>();
    Deque<TreeNode> stack = new LinkedList<TreeNode>();
    
    while (root != null) {
      stack.offerLast(root);
      root = root.left;
    }
    
    while (!stack.isEmpty()) {
      TreeNode  cur = stack.pollFirst();
      if (list.size() < k) {
        list.offerFirst(cur.value);
      } else {
        int first = list.peekFirst();
        if (Math.abs(first - target) > Math.abs(cur.val - target)) {
          list.pollFirst();
          list.offerLast(cur.val);
        } else {
          break;
        }
      }
      if (cur.right != null) {
        cur = cur.right;
        while (cur != null) {
          stack.offerFirst(cur);
          cur = cur.left;
        }
      }
    }
    return (List<Integer>)list;
  
  }


}
