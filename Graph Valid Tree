//Graph Valid Tree

/*Given n nodes labeled from 0 to n - 1 and a list of undirected edges (each edge is a pair of nodes), 
write a function to check whether these edges make up a valid tree.

For example:

Given n = 5 and edges = [[0, 1], [0, 2], [0, 3], [1, 4]], return true.

Given n = 5 and edges = [[0, 1], [1, 2], [2, 3], [1, 3], [1, 4]], return false.

Note: you can assume that no duplicate edges will appear in edges. 
Since all edges are undirected, [0, 1] is the same as [1, 0] and 
thus will not appear together in edges.

*/

//hint : According to the definition of tree on Wikipedia: 
“a tree is an undirected graph in which any two vertices are connected by exactly one path. 
In other words, any connected graph without simple cycles is a tree.”

//vertices = edges+1
//All the vertices in graph are connected

//DFS

Class Solution {
  public boolean validTree(int n, int[][] edges) {
    if (n == 0) return false;
    //nums of nodes must be equal to num of edges + 1(guarantee no loops)
    if (n - 1 != edges.length) return flase;
    //parse the nodes and edges into graph
    //<Node, Set of neighbors>
    Map<Integer, Set<Integer>> graph = initializeGraph(n, edges);
    Queue<Integer> toVisit = new LinkedList<>();
    Set<Integer> visited = new HashSet<>();
    
    toVisit.offer(0);
    visited.add(0);
    
    while (!toVistit.isEmpty()) {
      int node = toVisit.poll();
      //traverse all the neighbors of a node(BFS)
      for (int neighbor : graph.get(node)) {
        if (visited.contains(neighbor)) continue;
        toVisit.offer(neighbor);
        visited.add(neighbor);
      }
    }
    //num of nodes visited must equal amount of nodes given
    return (visited.size() == n);
  }
  
  
  //helper function to parse and create the graph 
  private Map<Integer, Set<Integer>> initializeGraph(int n, int[][] edges) {
    Map<Integer, Set<Integer>> graph = new HashMap<>();
    for (int i = 0; i < n; i++) {
      graph.put(i, new HashSet<Integer>());
    }
    
    //go through the edges and add corresponding neighbors
    for (int i = 0; i < edges.length; i++) {
      int u = edges[i][0];
      int v = edges[i][1];
      graph.get(u).add(v);
      graph.get(v).add(u);
    }
    return graph;
  } 






}

