/*Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its level order traversal as:
[
  [3],
  [9,20],
  [15,7]
]

*/



public class Solution {
  public List<List<Integer>> levelOrder(TreeNode root) {
    Queue<TreeNode> queue = new LinkedList<TreeNode>();
    List<List<Integer>> wrapList = new LinkedList<List<Integer>>();
    
    if (root == null) return warpList;
    
    queue.offer(root);
    while(!queue.isEmpty()) {
      int levelNum = queue.size();
      List<Integer> subList = new LinkedList<Integer>();
      for (int i = 0; i <levelNum; i++) {
        if (queue.peek().left != null) queue.offer(queue.peek().left);
        if (queue.peek().right != null) queue.offer(queue.peek().right);
        subList.add(queue.poll().val);
        }
        wrapList.add(subList);
      }
      return warpList;
    }
  
  }

}
